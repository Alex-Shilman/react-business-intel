'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDraggable = require('react-draggable');

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _cloneElement = require('./cloneElement');

var _cloneElement2 = _interopRequireDefault(_cloneElement);

var Resizable = (function (_React$Component) {
  _inherits(Resizable, _React$Component);

  function Resizable() {
    _classCallCheck(this, Resizable);

    _get(Object.getPrototypeOf(Resizable.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      bounds: this.constraintsToBounds(),
      width: this.props.width,
      height: this.props.height
    };
  }

  _createClass(Resizable, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (!this.state.resizing) {
        this.setState({
          width: props.width,
          height: props.height,
          bounds: this.constraintsToBounds()
        });
      }
    }
  }, {
    key: 'constraintsToBounds',
    value: function constraintsToBounds() {
      var p = this.props;
      var mins = p.minConstraints || p.handleSize;
      var maxes = p.maxConstraints || [Infinity, Infinity];
      return {
        left: mins[0] - p.width,
        top: mins[1] - p.height,
        right: maxes[0] - p.width,
        bottom: maxes[1] - p.height
      };
    }

    /**
     * Wrapper around drag events to provide more useful data.
     *
     * @param  {String} handlerName Handler name to wrap.
     * @return {Function}           Handler function.
     */
  }, {
    key: 'resizeHandler',
    value: function resizeHandler(handlerName) {
      var _this = this;

      return function (e, _ref) {
        var node = _ref.node;
        var position = _ref.position;

        var width = _this.state.width + position.deltaX,
            height = _this.state.height + position.deltaY;
        _this.props[handlerName] && _this.props[handlerName](e, { node: node, size: { width: width, height: height } });

        if (handlerName === 'onResizeStart') {
          _this.setState({ resizing: true });
        } else if (handlerName === 'onResizeStop') {
          _this.setState({ resizing: false });
        } else {
          _this.setState({ width: width, height: height });
        }
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var p = this.props;

      // What we're doing here is getting the child of this element, and cloning it with this element's props.
      // We are then defining its children as:
      // Its original children (resizable's child's children), and
      // A draggable handle.
      return (0, _cloneElement2['default'])(p.children, (0, _objectAssign2['default'])({}, p, {
        children: [p.children.props.children, _react2['default'].createElement(
          _reactDraggable.DraggableCore,
          _extends({}, p.draggableOpts, {
            ref: 'draggable',
            onStop: this.resizeHandler('onResizeStop'),
            onStart: this.resizeHandler('onResizeStart'),
            onDrag: this.resizeHandler('onResize'),
            bounds: this.state.bounds
          }),
          _react2['default'].createElement('span', { className: 'react-resizable-handle' })
        )]
      }));
    }
  }], [{
    key: 'propTypes',
    value: {
      //
      // Required Props
      //

      // Require that one and only one child be present.
      children: _react.PropTypes.element.isRequired,

      // Initial w/h
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,

      //
      // Optional props
      //

      // If you change this, be sure to update your css
      handleSize: _react.PropTypes.array,

      // Min/max size
      minConstraints: _react.PropTypes.arrayOf(_react.PropTypes.number),
      maxConstraints: _react.PropTypes.arrayOf(_react.PropTypes.number),

      // Callbacks
      onResizeStop: _react.PropTypes.func,
      onResizeStart: _react.PropTypes.func,
      onResize: _react.PropTypes.func,

      // These will be passed wholesale to react-draggable's DraggableCore
      draggableOpts: _react.PropTypes.object
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      handleSize: [20, 20]
    },
    enumerable: true
  }]);

  return Resizable;
})(_react2['default'].Component);

exports['default'] = Resizable;
module.exports = exports['default'];