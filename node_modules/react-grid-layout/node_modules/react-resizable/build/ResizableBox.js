'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Resizable = require('./Resizable');

var _Resizable2 = _interopRequireDefault(_Resizable);

// An example use of Resizable.

var ResizableBox = (function (_React$Component) {
  _inherits(ResizableBox, _React$Component);

  function ResizableBox() {
    var _this = this;

    _classCallCheck(this, ResizableBox);

    _get(Object.getPrototypeOf(ResizableBox.prototype), 'constructor', this).apply(this, arguments);

    this.state = {
      width: this.props.width,
      height: this.props.height,
      aspectRatio: this.props.width / this.props.height
    };

    this.onResize = function (event, data) {
      var element = data.element;
      var size = data.size;
      var width = size.width;
      var height = size.height;

      var widthChanged = width !== _this.state.width,
          heightChanged = height !== _this.state.height;
      if (!widthChanged && !heightChanged) return;

      var _runConstraints = _this.runConstraints(width, height);

      var _runConstraints2 = _slicedToArray(_runConstraints, 2);

      width = _runConstraints2[0];
      height = _runConstraints2[1];

      _this.setState({ width: width, height: height }, function () {
        if (_this.props.onResize) {
          _this.props.onResize(event, { element: element, size: { width: width, height: height } });
        }
      });
    };
  }

  _createClass(ResizableBox, [{
    key: 'runConstraints',

    // If you do this, be careful of constraints
    value: function runConstraints(width, height) {
      var min = this.props.minConstraints;
      var max = this.props.maxConstraints;

      if (this.props.lockAspectRatio) {
        height = width / this.state.aspectRatio;
        width = height * this.state.aspectRatio;
      }

      if (min) {
        width = Math.max(min[0], width);
        height = Math.max(min[1], height);
      }
      if (max) {
        width = Math.min(max[0], width);
        height = Math.min(max[1], height);
      }
      return [width, height];
    }
  }, {
    key: 'render',
    value: function render() {
      // Basic wrapper around a Resizable instance.
      // If you use Resizable directly, you are responsible for updating the component
      // with a new width and height.
      var _props = this.props;
      var handleSize = _props.handleSize;
      var minConstraints = _props.minConstraints;
      var maxConstraints = _props.maxConstraints;

      var props = _objectWithoutProperties(_props, ['handleSize', 'minConstraints', 'maxConstraints']);

      return _react2['default'].createElement(
        _Resizable2['default'],
        {
          minConstraints: minConstraints,
          maxConstraints: maxConstraints,
          handleSize: handleSize,
          width: this.state.width,
          height: this.state.height,
          onResizeStart: this.props.onResizeStart,
          onResize: this.onResize,
          onResizeStop: this.props.onResizeStop,
          draggableOpts: this.props.draggableOpts
        },
        _react2['default'].createElement(
          'div',
          _extends({ style: { width: this.state.width + 'px', height: this.state.height + 'px' } }, props),
          this.props.children
        )
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      lockAspectRatio: _react.PropTypes.bool,
      minConstraints: _react.PropTypes.arrayOf(_react.PropTypes.number),
      maxConstraints: _react.PropTypes.arrayOf(_react.PropTypes.number),
      height: _react.PropTypes.number,
      width: _react.PropTypes.number
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      lockAspectRatio: false,
      handleSize: [20, 20]
    },
    enumerable: true
  }]);

  return ResizableBox;
})(_react2['default'].Component);

exports['default'] = ResizableBox;
module.exports = exports['default'];

// TODO data is ResizeData type, but that doesn't work in babel-typecheck pre-babel6