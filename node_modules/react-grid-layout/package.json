{
  "_args": [
    [
      "react-grid-layout@git+https://github.com/STRML/react-grid-layout.git#next",
      "C:\\App\\react-business-intel"
    ]
  ],
  "_from": "git+https://github.com/STRML/react-grid-layout.git#next",
  "_id": "react-grid-layout@0.9.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-grid-layout",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/STRML/react-grid-layout/next/package.json",
      "gitUrl": "git://github.com/STRML/react-grid-layout.git#next",
      "httpsUrl": "git+https://github.com/STRML/react-grid-layout.git#next",
      "shortcut": "github:STRML/react-grid-layout#next",
      "ssh": "git@github.com:STRML/react-grid-layout.git#next",
      "sshUrl": "git+ssh://git@github.com/STRML/react-grid-layout.git#next",
      "type": "github"
    },
    "name": "react-grid-layout",
    "raw": "react-grid-layout@git+https://github.com/STRML/react-grid-layout.git#next",
    "rawSpec": "git+https://github.com/STRML/react-grid-layout.git#next",
    "scope": null,
    "spec": "git+https://github.com/STRML/react-grid-layout.git#next",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/STRML/react-grid-layout.git#1ba9e0540abb864d03503187cff1e2e1d709a79c",
  "_shasum": "f5de118fbabb4d9d8dec7bfe2f3f66ec30cd4948",
  "_shrinkwrap": null,
  "_spec": "react-grid-layout@git+https://github.com/STRML/react-grid-layout.git#next",
  "_where": "C:\\App\\react-business-intel",
  "author": {
    "email": "samuel.trace.reed@gmail.com",
    "name": "Samuel Reed",
    "url": "http://strml.net/"
  },
  "bugs": {
    "url": "https://github.com/STRML/react-grid-layout/issues"
  },
  "dependencies": {
    "deep-equal": "^1.0.1",
    "object-assign": "^4.0.1",
    "react-draggable": "^1.1.1",
    "react-resizable": "^1.0.1"
  },
  "description": "A draggable and resizable grid layout with responsive breakpoints, for React.",
  "devDependencies": {
    "babel": "5.x",
    "babel-core": "^5.x",
    "babel-eslint": "^4.1.5",
    "babel-loader": "^5.x",
    "babel-plugin-react-display-name": "^2.0.0",
    "babel-plugin-react-transform": "^1.1.1",
    "babel-plugin-typecheck": "^2.0.0",
    "babel-runtime": "5.x",
    "css-loader": "^0.23.0",
    "ejs": "^2.3.4",
    "eslint": "^1.9.0",
    "eslint-plugin-react": "^3.9.0",
    "exports-loader": "^0.6.2",
    "imports-loader": "^0.6.5",
    "jsxhint": "^0.15.1",
    "lodash": "^3.10.1",
    "pre-commit": "^1.1.2",
    "precommit-hook": "^3.0.0",
    "react": "^0.14.2",
    "react-dom": "^0.14.2",
    "react-hot-loader": "^1.3.0",
    "react-transform-hmr": "^1.0.1",
    "style-loader": "^0.13.0",
    "webpack": "^1.12.6",
    "webpack-dev-server": "^1.12.1"
  },
  "gitHead": "1ba9e0540abb864d03503187cff1e2e1d709a79c",
  "homepage": "https://github.com/STRML/react-grid-layout",
  "keywords": [
    "drag",
    "draggable",
    "fluid",
    "grid",
    "react",
    "resizable",
    "resize",
    "responsive"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "react-grid-layout",
  "optionalDependencies": {},
  "pre-commit": [
    "lint"
  ],
  "publishConfig": {
    "registry": "https://registry.npmjs.org"
  },
  "readme": "# React-Grid-Layout\r\n\r\n[![NPM](https://nodei.co/npm/react-grid-layout.png?downloads=true&downloadRank=true&stars=true)](https://www.npmjs.com/package/react-grid-layout)\r\n\r\n- [Summary](#summary)\r\n- [Changelog](/CHANGELOG.md)\r\n- [Demos](#demos)\r\n- [Features](#features)\r\n- [Usage](#usage)\r\n- [Responsive Usage](#responsive-usage)\r\n- [Grid Layout Props](#grid-layout-props)\r\n- [Grid Item Props](#grid-item-props)\r\n- [Grid Layout Defaults](#grid-layout-defaults)\r\n- [TODO List](#todo-list)\r\n\r\n#### Summary\r\n\r\n[View the Demo](https://strml.github.io/react-grid-layout/examples/0-showcase.html)\r\n\r\nReact-Grid-Layout is a grid layout system much like [Packery](http://packery.metafizzy.co/) or\r\n[Gridster](http://gridster.net), for React.\r\n\r\nUnlike those systems, it is responsive and supports breakpoints. Breakpoint layouts can be provided by the user\r\nor autogenerated.\r\n\r\nRGL is React-only and does not require jQuery.\r\n\r\nIf you have a feature request, please add it as an issue or make a pull request. See also the [TODOs](#todo-list).\r\n\r\n#### Demos\r\n\r\n1. [Showcase](https://strml.github.io/react-grid-layout/examples/0-showcase.html)\r\n1. [Basic](https://strml.github.io/react-grid-layout/examples/1-basic.html)\r\n1. [No Dragging/Resizing (Layout Only)](https://strml.github.io/react-grid-layout/examples/2-no-dragging.html)\r\n1. [Messy Layout Autocorrect](https://strml.github.io/react-grid-layout/examples/3-messy.html)\r\n1. [Layout Defined on Children](https://strml.github.io/react-grid-layout/examples/4-grid-property.html)\r\n1. [Static Elements](https://strml.github.io/react-grid-layout/examples/5-static-elements.html)\r\n1. [Adding/Removing Elements](https://strml.github.io/react-grid-layout/examples/6-dynamic-add-remove.html)\r\n1. [Saving Layout to LocalStorage](https://strml.github.io/react-grid-layout/examples/7-localstorage.html)\r\n1. [Saving a Responsive Layout to LocalStorage](https://strml.github.io/react-grid-layout/examples/8-localstorage-responsive.html)\r\n1. [Minimum and Maximum Width/Height](https://strml.github.io/react-grid-layout/examples/9-min-max-wh.html)\r\n1. [Dynamic Minimum and Maximum Width/Height](https://strml.github.io/react-grid-layout/examples/10-dynamic-min-max-wh.html)\r\n1. [No Vertical Compacting (Free Movement)](https://strml.github.io/react-grid-layout/examples/11-no-vertical-compact.html)\r\n\r\n#### Features\r\n\r\n* 100% React - no jQuery\r\n* Compatible with server-rendered apps\r\n* Draggable widgets\r\n* Resizable widgets\r\n* Static widgets\r\n* Vertical auto-packing\r\n* Bounds checking for dragging and resizing\r\n* Widgets may be added or removed without rebuilding grid\r\n* Layout can be serialized and restored\r\n* Responsive breakpoints\r\n* Separate layouts per responsive breakpoint\r\n* Grid Items placed using CSS Transforms\r\n  * Performance: [on](http://i.imgur.com/FTogpLp.jpg) / [off](http://i.imgur.com/gOveMm8.jpg), note paint (green) as % of time\r\n\r\n#### Usage\r\n\r\nUse ReactGridLayout like any other component.\r\n\r\n```javascript\r\nvar ReactGridLayout = require('react-grid-layout');\r\n//...\r\nrender: function() {\r\n  // layout is an array of objects, see the demo\r\n  var layout = getOrGenerateLayout();\r\n  return (\r\n    <ReactGridLayout className=\"layout\" layout={layout}\r\n      cols={12} rowHeight={30}>\r\n      <div key={1}>1</div>\r\n      <div key={2}>2</div>\r\n      <div key={3}>3</div>\r\n    </ReactGridLayout>\r\n  )\r\n}\r\n```\r\n\r\nYou can also set layout properties directly on the children:\r\n\r\n\r\n```javascript\r\nvar ReactGridLayout = require('react-grid-layout');\r\n//...\r\nrender: function() {\r\n  return (\r\n    <ReactGridLayout className=\"layout\" cols={12} rowHeight={30}>\r\n      <div key={1} _grid={{x: 0, y: 0, w: 1, h: 2}}>1</div>\r\n      <div key={2} _grid={{x: 1, y: 0, w: 1, h: 2}}>2</div>\r\n      <div key={3} _grid={{x: 2, y: 0, w: 1, h: 2}}>3</div>\r\n    </ReactGridLayout>\r\n  )\r\n}\r\n```\r\n#### Usage without Browserify/Webpack\r\n\r\nA module usable in a `<script>` tag is included [here](/dist/react-grid-layout.min.js). It uses a UMD shim and\r\nexcludes `React`, so it must be otherwise available in your application, either via RequireJS or on `window.React`.\r\n\r\n#### Responsive Usage\r\n\r\nTo make RGL responsive, use the `<ResponsiveReactGridLayout>` element:\r\n\r\n```javascript\r\nvar ResponsiveReactGridLayout = require('react-grid-layout').Responsive;\r\n//...\r\nrender: function() {\r\n  // {lg: layout1, md: layout2, ...}\r\n  var layouts = getLayoutsFromSomewhere();\r\n  return (\r\n    <ResponsiveReactGridLayout className=\"layout\" layouts={layouts}\r\n      breakpoints={{lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0}}\r\n      cols={{lg: 12, md: 10, sm: 6, xs: 4, xxs: 2}}>\r\n      <div key={1}>1</div>\r\n      <div key={2}>2</div>\r\n      <div key={3}>3</div>\r\n    </ResponsiveReactGridLayout>\r\n  )\r\n}\r\n```\r\n\r\nWhen in responsive mode, you should supply at least one breakpoint via the `layouts` property.\r\n\r\nWhen using `layouts`, it is best to supply as many breakpoints as possible, especially the largest one.\r\nIf the largest is provided, RGL will attempt to interpolate the rest.\r\n\r\nFor the time being, it is not possible to supply responsive mappings via the `_grid` property on individual\r\nitems, but that is coming soon.\r\n\r\n\r\n#### Grid Layout Props\r\n\r\nRGL supports the following properties (see the source for the final word on this):\r\n\r\n```javascript\r\n//\r\n// Basic props\r\n//\r\n\r\n// If true, the container height swells and contracts to fit contents\r\nautoSize: React.PropTypes.bool,\r\n\r\n// {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\r\nbreakpoints: React.PropTypes.object,\r\n\r\n// Number of columns in this layout.\r\ncols: React.PropTypes.number,\r\n\r\n// A selector that will not be draggable.\r\ndraggableCancel: React.PropTypes.string,\r\n// A selector for the draggable handler\r\ndraggableHandle: React.PropTypes.string,\r\n\r\n// If true, the layout will compact vertically\r\nverticalCompact: React.PropTypes.bool,\r\n\r\n// Layout is an array of object with the format:\r\n// {x: Number, y: Number, w: Number, h: Number}\r\n// The index into the layout must match the key used on each item component.\r\n// If you choose to use custom keys, you can specify that key in the layout\r\n// array objects like so:\r\n// {i: String, x: Number, y: Number, w: Number, h: Number}\r\nlayout: React.PropTypes.array,\r\n\r\n// This allows setting the initial width on the server side.\r\ninitialWidth: React.PropTypes.number,\r\n\r\n// Margin between items [x, y] in px.\r\nmargin: React.PropTypes.array,\r\n\r\n// Rows have a static height, but you can change this based on breakpoints\r\n// if you like.\r\nrowHeight: React.PropTypes.number,\r\n\r\n//\r\n// Flags\r\n//\r\nisDraggable: React.PropTypes.bool,\r\nisResizable: React.PropTypes.bool,\r\n// Uses CSS3 translate() instead of position top/left.\r\n// This makes about 6x faster paint performance\r\nuseCSSTransforms: React.PropTypes.bool,\r\n\r\n// If false, you should supply width yourself. Good if you want to debounce\r\n// resize events or reuse a handler from somewhere else.\r\nlistenToWindowResize: React.PropTypes.bool,\r\n\r\n//\r\n// Callbacks\r\n//\r\n\r\n// Callback so you can save the layout.\r\n// Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\r\nonLayoutChange: React.PropTypes.func,\r\n\r\n//\r\n// All callbacks below have signature (layout, oldItem, newItem, placeholder, e, element).\r\n// 'start' and 'stop' callbacks pass `undefined` for 'placeholder'.\r\n//\r\n\r\n// Calls when drag starts.\r\nonDragStart: React.PropTypes.func,\r\n// Calls on each drag movement.\r\nonDrag: React.PropTypes.func,\r\n// Calls when drag is complete.\r\nonDragStop: React.PropTypes.func,\r\n// Calls when resize starts.\r\nonResizeStart: React.PropTypes.func,\r\n// Calls when resize movement happens.\r\nonResize: React.PropTypes.func,\r\n// Calls when resize is complete.\r\nonResizeStop: React.PropTypes.func\r\n```\r\n\r\n#### Responsive Grid Layout Props\r\n\r\nThe responsive grid layout can be used instead. It supports all of the props above, excepting `layout`.\r\nThe new properties and changes are:\r\n\r\n```javascript\r\n// {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\r\n// Breakpoint names are arbitrary but must match in the cols and layouts objects.\r\nbreakpoints: React.PropTypes.object,\r\n\r\n// # of cols. This is a breakpoint -> cols map, e.g. {lg: 12, md: 10, ...}\r\ncols: React.PropTypes.object,\r\n\r\n// layouts is an object mapping breakpoints to layouts.\r\n// e.g. {lg: Layout, md: Layout, ...}\r\nlayouts: React.PropTypes.object\r\n\r\n//\r\n// Callbacks\r\n//\r\n\r\n// Calls back with breakpoint and new # cols\r\nonBreakpointChange: React.PropTypes.func,\r\n\r\n// Callback so you can save the layout.\r\n// Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\r\nonLayoutChange: React.PropTypes.func\r\n\r\n// Callback when the width changes, so you can modify the layout as needed.\r\n// Calls back with (containerWidth, margin, cols)\r\nonWidthChange: React.Proptypes.func\r\n```\r\n\r\n#### Grid Item Props\r\n\r\nRGL supports the following properties on grid items or layout items. When initializing a grid,\r\nbuild a layout array (as in the first example above), or attach this object as the `_grid` property\r\nto each of your child elements (as in the second example).\r\n\r\nNote that if a grid item is provided but incomplete (missing one of `x, y, w, or h`), an error\r\nwill be thrown so you can correct your layout.\r\n\r\nIf no properties are provided for a grid item, one will be generated with a width and height of `1`.\r\n\r\nYou can set minimums and maximums for each dimension. This is for resizing; it of course has no effect if resizing\r\nis disabled. Errors will be thrown if your mins and maxes overlap incorrectly, or your initial dimensions\r\nare out of range.\r\n\r\nAny GridItem properties defined directly on the layout item will take precedence over globally-set options. For\r\nexample, if the layout has the property `isDraggable: false`, but the grid item has `isDraggable: true`, the item\r\nwill be draggable.\r\n\r\n```javascript\r\n{\r\n  // These are all in grid units, not pixels\r\n  x: React.PropTypes.number.isRequired,\r\n  y: React.PropTypes.number.isRequired,\r\n  w: React.PropTypes.number.isRequired,\r\n  h: React.PropTypes.number.isRequired,\r\n  minW: React.PropTypes.number,\r\n  maxW: React.PropTypes.number,\r\n  minH: React.PropTypes.number,\r\n  maxH: React.PropTypes.number,\r\n\r\n  // If true, equal to `isDraggable: false, isResizable: false`.\r\n  static: React.PropTypes.bool,\r\n  // If false, will not be draggable. Overrides `static`.\r\n  isDraggable: React.PropTypes.bool,\r\n  // If false, will not be resizable. Overrides `static`.\r\n  isResizable: React.PropTypes.bool,\r\n\r\n  className: React.PropTypes.string,\r\n  // Selector for draggable handle\r\n  handle: React.PropTypes.string,\r\n  // Selector for draggable cancel (see react-draggable)\r\n  cancel: React.PropTypes.string\r\n}\r\n```\r\n\r\n#### Grid Layout Defaults\r\n\r\n```javascript\r\n{\r\n  autoSize: true,\r\n  breakpoints: {lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0},\r\n  cols: 10,\r\n  rowHeight: 150,\r\n  initialWidth: 1280,\r\n  margin: [10, 10],\r\n  minH: 1,\r\n  minW: 1,\r\n  maxH: Infinity,\r\n  maxW: Infinity,\r\n  isDraggable: true,\r\n  isResizable: true,\r\n  useCSSTransforms: true,\r\n  listenToWindowResize: true,\r\n  verticalCompact: true\r\n}\r\n```\r\n\r\n#### TODO List\r\n\r\n- [x] Basic grid layout\r\n- [x] Fluid grid layout\r\n- [x] Grid packing\r\n- [x] Draggable grid items\r\n- [x] Live grid packing while dragging\r\n- [x] Resizable grid items\r\n- [x] Layouts per responsive breakpoint\r\n- [x] Define grid attributes on children themselves (`_grid` key)\r\n- [x] Static elements\r\n- [x] Persistent id per item for predictable localstorage restores, even when # items changes\r\n- [x] Min/max w/h per item\r\n- [ ] Resizable handles on other corners\r\n- [ ] Configurable w/h per breakpoint\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/STRML/react-grid-layout.git"
  },
  "scripts": {
    "build": "bash build.sh",
    "build-example": "webpack --config webpack-examples.config.js; node ./examples/generate.js",
    "dev": "echo 'Open http://localhost:4002'; webpack-dev-server --config webpack-dev-server.config.js --hot --progress --colors --port 4002 --content-base .",
    "lint": "eslint --ext .js,.jsx lib/ test/",
    "prepublish": "npm run build",
    "test": "echo \"Error: no test specified\" && exit 1",
    "validate": "npm ls"
  },
  "version": "0.9.2"
}
