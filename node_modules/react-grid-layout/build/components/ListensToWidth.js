'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _react = require('react');

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

/**
 * A simple HOC that provides facility for listening to container resizes.
 */

exports['default'] = function (ComposedComponent) {
    return (function (_Component) {
        _inherits(_class, _Component);

        function _class() {
            var _this = this;

            _classCallCheck(this, _class);

            _get(Object.getPrototypeOf(_class.prototype), 'constructor', this).apply(this, arguments);

            this.onWindowResize = function () {
                _this.refs.child.onWidthChange(_reactDom2['default'].findDOMNode(_this).offsetWidth);
            };
        }

        _createClass(_class, [{
            key: 'componentDidMount',
            value: function componentDidMount() {
                if (!this.props.listenToWindowResize) return;
                window.addEventListener('resize', this.onWindowResize);
                // This is intentional. Once to properly set the breakpoint and resize the elements,
                // and again to compensate for any scrollbar that appeared because of the first step.
                this.onWindowResize();
                this.onWindowResize();
            }
        }, {
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
                if (!this.props.listenToWindowResize) return;
                window.removeEventListener('resize', this.onWindowResize);
            }

            /**
             * On window resize, update width of child by calling listener directly.
             * TODO: cleaner way to do this?
             */
        }, {
            key: 'render',
            value: function render() {
                return _react.createElement(ComposedComponent, _extends({}, this.props, {ref: 'child'}));
            }
        }], [{
            key: 'propTypes',
            value: {
                // This allows setting this on the server side
                initialWidth: _react.PropTypes.number,

                // If false, you should supply width yourself. Good if you want to debounce resize events
                // or reuse a handler from somewhere else.
                listenToWindowResize: _react.PropTypes.bool
            },
            enumerable: true
        }, {
            key: 'defaultProps',
            value: {
                initialWidth: 1280,
                listenToWindowResize: true
            },
            enumerable: true
        }]);

        return _class;
    })(_react.Component);
};

module.exports = exports['default'];